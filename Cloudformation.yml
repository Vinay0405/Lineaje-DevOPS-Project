AWSTemplateFormatVersion: "2010-09-09"
Description: "Setting up AWS resources for a sample python application"

Resources:
  # setting up a new VPC
  DemoVPC:
    Type: AWS::EC2::VPC
    Properties:
      CidrBlock: "10.0.0.0/16"
      EnableDnsSupport: true
      EnableDnsHostnames: true
      Tags:
        - Key: "Name"
          Value: "DemoVPC"

  DemoSubnet:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref DemoVPC
      CidrBlock: "10.0.0.0/24"
      AvailabilityZone: "us-east-1a"
      Tags:
        - Key: "Name"
          Value: "DemoSubnet"

  DemoInternetGateway:
    Type: AWS::EC2::InternetGateway

  DemoAttachGateway:
    Type: AWS::EC2::VPCGatewayAttachment
    Properties:
      VpcId: !Ref DemoVPC
      InternetGatewayId: !Ref DemoInternetGateway

  DemoRouteTable:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref DemoVPC
      Tags:
        - Key: "Name"
          Value: "DemoRouteTable"

  DemoSubnetRouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref DemoSubnet
      RouteTableId: !Ref DemoRouteTable

  # Here creating the ECS Infrastructure
  DemoECSRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Principal:
              Service: ecs-tasks.amazonaws.com
            Action: sts:AssumeRole
      Policies:
        - PolicyName: "ECSTaskExecutionRolePolicy"
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Effect: Allow
                Action:
                  - logs:CreateLogStream
                  - logs:CreateLogGroup
                  - logs:PutLogEvents
                Resource: "*"

  DemoECSCluster:
    Type: AWS::ECS::Cluster

  DemoECRRepository:
    Type: AWS::ECR::Repository

  DemoTaskDefinition:
    Type: AWS::ECS::TaskDefinition
    Properties:
      Family: !Ref "AWS::StackName"
      ExecutionRoleArn: !GetAtt DemoECSRole.Arn
      RequiresCompatibilities:
        - "FARGATE"  # Adding this line to specify Fargate launch type
      ContainerDefinitions:
        - Name: AppContainer
          Image: !Ref "ApplicationImage"
          Memory: 4048
          Cpu: 1024

  DemoECSAutoScalingGroup:
    Type: AWS::AutoScaling::AutoScalingGroup
    Properties:
      MinSize: 1
      MaxSize: 3
      DesiredCapacity: 1
      VPCZoneIdentifier: !Ref DemoSubnet
      LaunchTemplate:
        Version: "1"
        LaunchTemplateName: "DemoLaunchTemplate"

  DemoLoadBalancer:
    Type: AWS::ElasticLoadBalancingV2::LoadBalancer
    Properties:
      Subnets:
        - !Ref DemoSubnet
      SecurityGroups:
        - !GetAtt DemoECSCluster.DefaultCapacityReservationSpec.CapacityReservationTarget.SecurityGroupIds
      Scheme: internet-facing

  DemoListener:
    Type: AWS::ElasticLoadBalancingV2::Listener
    Properties:
      DefaultActions:
        - Type: fixed-response
          FixedResponseConfig:
            ContentType: "text/plain"
            StatusCode: "200"
            MessageBody: "OK"
      LoadBalancerArn: !Ref DemoLoadBalancer
      Port: 80
      Protocol: HTTP

  DemoTargetGroup:
    Type: AWS::ElasticLoadBalancingV2::TargetGroup
    Properties:
      Port: 80
      Protocol: HTTP
      VpcId: !Ref DemoVPC
      HealthCheckEnabled: true
      HealthCheckIntervalSeconds: 30
      HealthCheckPath: "/"
      HealthCheckProtocol: HTTP
      HealthCheckTimeoutSeconds: 15
      HealthyThresholdCount: 3
      UnhealthyThresholdCount: 3

  DemoListenerRule:
    Type: AWS::ElasticLoadBalancingV2::ListenerRule
    Properties:
      Actions:
        - Type: forward
          TargetGroupArn: !Ref DemoTargetGroup
      Conditions:
        - Field: path-pattern
          Values:
            - "/*"
      ListenerArn: !Ref DemoListener

  # CloudWatch Alarm and SNS Topic to get the alert if CPU utilization exceeds 80%
  DemoCloudWatchAlarm:
    Type: AWS::CloudWatch::Alarm
    Properties:
      AlarmName: "HighCpuUtilizationAlarm"
      ComparisonOperator: GreaterThanThreshold
      EvaluationPeriods: 1
      MetricName: "CPUUtilization"
      Namespace: "AWS/ECS"
      Period: 90
      Statistic: Maximum
      Threshold: 80
      ActionsEnabled: true
      AlarmActions:
        - !Ref DemoSNSTopic
      Dimensions:
        - Name: ClusterName
          Value: !Ref DemoECSCluster

  DemoSNSTopic:
    Type: AWS::SNS::Topic
    Properties:
      DisplayName: "HighCpuUtilizationTopic"
      TopicName: "HighCpuUtilizationTopic"

  DemoSNSSubscription:
    Type: AWS::SNS::Subscription
    Properties:
      Protocol: email
      TopicArn: !Ref DemoSNSTopic
      Endpoint: "vinayptru16@gmail.com"
